(re-defn #'clojure.core/primitives-classnames [nil])
(re-defn #'clojure.core/+' [:args])
(re-defn #'clojure.core/decimal? [:n])
(re-defn #'clojure.core/restart-agent [nil])
(re-defn #'clojure.core/sort-by [nil :coll] [nil nil :coll])
(re-defn #'clojure.core/macroexpand [nil])
(re-defn #'clojure.core/ensure [nil])
(re-defn #'clojure.core/chunk-first [:str])
(re-defn #'clojure.core/eduction [nil :coll])
(re-defn #'clojure.core/tree-seq [nil nil nil])
(re-defn #'clojure.core/unchecked-remainder-int [:arg :arg])
(re-defn #'clojure.core/seq [:coll])
(re-defn #'clojure.core/reduce [:f :coll] [:f :arg :coll])
(re-defn #'clojure.core/when-first [nil])
(re-defn #'clojure.core/find-ns [nil])
(re-defn #'clojure.core/get-thread-bindings [nil])
(re-defn #'clojure.core/contains? [:coll :arg])
(re-defn #'clojure.core/every? [:f :coll])
(re-defn #'clojure.core/proxy-mappings [nil])
(re-defn #'clojure.core/keep-indexed [:f] [:f :coll])
(re-defn #'clojure.core/cond->> [nil])
(re-defn #'clojure.core/subs [:str :n] [:str :n :n])
(re-defn #'clojure.core/ref-min-history [nil] [nil :n])
(re-defn #'clojure.core/set [:coll])
(re-defn #'clojure.core/take-last [:n :coll])
(re-defn #'clojure.core/bit-set [:arg :n])
(re-defn #'clojure.core/reader-conditional [nil nil])
(re-defn #'clojure.core/gen-class [nil])
(re-defn #'clojure.core/qualified-keyword? [:arg])
(re-defn #'clojure.core/while [nil])
(re-defn #'clojure.core/->Eduction [nil :coll])
(re-defn #'clojure.core/butlast [:coll])
(re-defn #'clojure.core/satisfies? [nil :arg])
(re-defn #'clojure.core/line-seq [nil])
(re-defn #'clojure.core/unchecked-subtract-int [:arg :arg])
(re-defn #'clojure.core/take-nth [:n] [:n :coll])
(re-defn #'clojure.core/first [:coll])
(re-defn #'clojure.core/re-groups [nil])
(re-defn #'clojure.core/seq? [:arg])
(re-defn #'clojure.core/dec' [:arg])
(re-defn #'clojure.core/ns-unmap [nil nil])
(re-defn #'clojure.core/println-str [:args])
(re-defn #'clojure.core/with-bindings* [:args])
(re-defn #'clojure.core/inst-ms [nil])
(re-defn #'clojure.core/iterator-seq [nil])
(re-defn #'clojure.core/iterate [:f :arg])
(re-defn #'clojure.core/slurp [nil])
(re-defn #'clojure.core/newline [nil])
(re-defn #'clojure.core/short-array [nil] [:n nil])
(re-defn #'clojure.core/fn? [:arg])
(re-defn #'clojure.core/doall [:coll] [:n :coll])
(re-defn #'clojure.core/prefers [nil])
(re-defn #'clojure.core/enumeration-seq [nil])
(re-defn #'clojure.core/dedupe [:coll])
(re-defn #'clojure.core/dissoc [:map-or-vector] [:map-or-vector :arg nil])
(re-defn #'clojure.core/atom [:arg nil])
(re-defn #'clojure.core/import [nil])
(re-defn #'clojure.core/bit-shift-right [:arg :n])
(re-defn #'clojure.core/print-method [nil])
(re-defn #'clojure.core/peek [:coll])
(re-defn #'clojure.core/aget [nil])
(re-defn #'clojure.core/pvalues [nil])
(re-defn #'clojure.core/bound-fn [nil])
(re-defn #'clojure.core/vswap! [:args])
(re-defn #'clojure.core/last [:coll])
(re-defn #'clojure.core/pr [:args])
(re-defn #'clojure.core/namespace [:arg])
(re-defn #'clojure.core/push-thread-bindings [nil])
(re-defn #'clojure.core/bases [:coll])
(re-defn #'clojure.core/= [:args])
(re-defn #'clojure.core/dosync [nil])
(re-defn #'clojure.core/remove-ns [nil])
(re-defn #'clojure.core/take [:n] [:n :coll])
(re-defn #'clojure.core/vector? [:arg])
(re-defn #'clojure.core/thread-bound? [nil])
(re-defn #'clojure.core/send-via [:args])
(re-defn #'clojure.core/boolean [:arg])
(re-defn #'clojure.core/bit-shift-left [:arg :n])
(re-defn #'clojure.core/any? [:arg])
(re-defn #'clojure.core/find-var [nil])
(re-defn #'clojure.core/rand-int [:n])
(re-defn #'clojure.core/aclone [nil])
(re-defn #'clojure.core/vreset! [nil nil])
(re-defn #'clojure.core/chunk [nil])
(re-defn #'clojure.core/dec [:arg])
(re-defn #'clojure.core/future-call [:f])
(re-defn #'clojure.core/resultset-seq [nil])
(re-defn #'clojure.core/struct [:args])
(re-defn #'clojure.core/map [:f :colls])
(re-defn #'clojure.core/juxt [:f nil] [:f] [:f nil nil :fs])
(re-defn #'clojure.core/ns-publics [nil])
(re-defn #'clojure.core/< [:args])
(re-defn #'clojure.core/*source-path* [nil])
(re-defn #'clojure.core/with-loading-context [nil])
(re-defn #'clojure.core/test [nil])
(re-defn #'clojure.core/rest [:coll])
(re-defn #'clojure.core/ex-data [nil])
(re-defn #'clojure.core/compile [nil])
(re-defn #'clojure.core/isa? [nil nil] [nil nil nil])
(re-defn #'clojure.core/boolean? [:arg])
(re-defn #'clojure.core/.. [:arg nil :args])
(re-defn #'clojure.core/munge [:str])
(re-defn #'clojure.core/delay [nil])
(re-defn #'clojure.core/set-error-mode! [nil nil])
(re-defn #'clojure.core/re-seq [nil :str])
(re-defn #'clojure.core/char? [:arg])
(re-defn #'clojure.core/make-hierarchy [nil])
(re-defn #'clojure.core/set-agent-send-executor! [nil])
(re-defn #'clojure.core/keep [:f] [:f :coll])
(re-defn #'clojure.core/char [:arg])
(re-defn #'clojure.core/mapcat [:f :colls])
(re-defn #'clojure.core/unchecked-long [:arg])
(re-defn #'clojure.core/aset-long [nil nil :arg nil])
(re-defn #'clojure.core/some? [:arg])
(re-defn #'clojure.core/unchecked-negate [:arg])
(re-defn #'clojure.core/gen-interface [nil])
(re-defn #'clojure.core/*command-line-args* [nil])
(re-defn #'clojure.core/reverse [:coll])
(re-defn #'clojure.core/inst? [:arg])
(re-defn #'clojure.core/range [] [:n] [:n :n] [:n :n :n])
(re-defn #'clojure.core/sort [:coll] [nil :coll])
(re-defn #'clojure.core/-cache-protocol-fn [nil :arg :coll nil])
(re-defn #'clojure.core/unchecked-inc-int [:arg])
(re-defn #'clojure.core/map-indexed [:f] [:f :coll])
(re-defn #'clojure.core/with-bindings [nil])
(re-defn #'clojure.core/rand-nth [:coll])
(re-defn #'clojure.core/comp [] [:f :fs])
(re-defn #'clojure.core/await [nil])
(re-defn #'clojure.core/spit [nil])
(re-defn #'clojure.core/future-done? [:f])
(re-defn #'clojure.core/*read-eval* [nil])
(re-defn #'clojure.core/dorun [:coll] [:n :coll])
(re-defn #'clojure.core/simple-symbol? [:arg])
(re-defn #'clojure.core/disj [nil] [nil :arg nil])
(re-defn #'clojure.core/*2 [nil])
(re-defn #'clojure.core/eval [nil])
(re-defn #'clojure.core/cons [:arg :seq])
(re-defn #'clojure.core/refer [nil])
(re-defn #'clojure.core/print-dup [nil])
(re-defn #'clojure.core/-reset-methods [nil])
(re-defn #'clojure.core/floats [:args])
(re-defn #'clojure.core/pos? [:arg])
(re-defn #'clojure.core/fnil [:f :arg] [:f :arg :arg] [:f :arg :arg nil])
(re-defn #'clojure.core/merge-with [:maps-or-vectors])
(re-defn #'clojure.core/nthrest [:coll :n])
(re-defn #'clojure.core/load [nil])
(re-defn #'clojure.core/if-not [nil nil] [nil nil nil])
(re-defn #'clojure.core/*verbose-defrecords* [nil])
(re-defn #'clojure.core/sequential? [:coll])
(re-defn #'clojure.core/*print-level* [nil])
(re-defn #'clojure.core/shuffle [:coll])
(re-defn #'clojure.core/boolean-array [nil] [:n nil])
(re-defn #'clojure.core/find [:map-or-vector :arg])
(re-defn #'clojure.core/alength [nil])
(re-defn #'clojure.core/bit-xor [:args])
(re-defn #'clojure.core/deliver [nil :arg])
(re-defn #'clojure.core/doseq [nil])
(re-defn #'clojure.core/unsigned-bit-shift-right [:arg :n])
(re-defn #'clojure.core/neg? [:arg])
(re-defn #'clojure.core/var-set [:arg :arg])
(re-defn #'clojure.core/unchecked-float [:arg])
(re-defn #'clojure.core/pmap [:colls])
(re-defn #'clojure.core/error-mode [nil])
(re-defn #'clojure.core/num [:arg])
(re-defn #'clojure.core/reduced? [:arg])
(re-defn #'clojure.core/disj! [nil] [nil :arg nil])
(re-defn #'clojure.core/float? [:n])
(re-defn #'clojure.core/aset-float [nil nil :arg nil])
(re-defn #'clojure.core/bean [:arg])
(re-defn #'clojure.core/booleans [:args])
(re-defn #'clojure.core/ns-unalias [nil nil])
(re-defn #'clojure.core/when-let [nil])
(re-defn #'clojure.core/int-array [nil] [:n nil])
(re-defn #'clojure.core/set? [:arg])
(re-defn #'clojure.core/inc' [:arg])
(re-defn #'clojure.core/cat [nil])
(re-defn #'clojure.core/StackTraceElement->vec [nil])
(re-defn #'clojure.core/*suppress-read* [nil])
(re-defn #'clojure.core/flush [nil])
(re-defn #'clojure.core/take-while [:f] [:f :coll])
(re-defn #'clojure.core/vary-meta [:args])
(re-defn #'clojure.core/<= [:args])
(re-defn #'clojure.core/alter [:args])
(re-defn #'clojure.core/-' [:args])
(re-defn #'clojure.core/if-some [nil])
(re-defn #'clojure.core/conj! [] [:coll] [:coll :arg])
(re-defn #'clojure.core/repeatedly [:f] [:n :f])
(re-defn #'clojure.core/zipmap [nil :args])
(re-defn #'clojure.core/alter-var-root [:args])
(re-defn #'clojure.core/biginteger [:arg])
(re-defn #'clojure.core/remove [:f] [:f :coll])
(re-defn #'clojure.core/* [:args])
(re-defn #'clojure.core/re-pattern [:str])
(re-defn #'clojure.core/min [:args])
(re-defn #'clojure.core/pop! [:coll])
(re-defn #'clojure.core/chunk-append [nil :arg])
(re-defn #'clojure.core/prn-str [:args])
(re-defn #'clojure.core/with-precision [nil])
(re-defn #'clojure.core/format [:args])
(re-defn #'clojure.core/reversible? [:coll])
(re-defn #'clojure.core/shutdown-agents [nil])
(re-defn #'clojure.core/conj [:args])
(re-defn #'clojure.core/bound? [nil])
(re-defn #'clojure.core/transduce [nil :f :coll] [nil :f nil :coll])
(re-defn #'clojure.core/lazy-seq [nil])
(re-defn #'clojure.core/*print-length* [nil])
(re-defn #'clojure.core/*file* [nil])
(re-defn #'clojure.core/compare-and-set! [nil nil nil])
(re-defn #'clojure.core/*use-context-classloader* [nil])
(re-defn #'clojure.core/await1 [nil])
(re-defn #'clojure.core/let [nil])
(re-defn #'clojure.core/ref-set [nil :arg])
(re-defn #'clojure.core/pop-thread-bindings [nil])
(re-defn #'clojure.core/interleave [:colls])
(re-defn #'clojure.core/printf [:args])
(re-defn #'clojure.core/map? [:arg])
(re-defn #'clojure.core/-> [nil])
(re-defn #'clojure.core/defstruct [nil])
(re-defn #'clojure.core/*err* [nil])
(re-defn #'clojure.core/get [:map-or-vector :arg] [:map-or-vector :arg nil])
(re-defn #'clojure.core/doto [nil])
(re-defn #'clojure.core/identity [:arg])
(re-defn #'clojure.core/into [nil nil] [nil nil nil])
(re-defn #'clojure.core/areduce [nil nil nil nil nil])
(re-defn #'clojure.core/long [:arg])
(re-defn #'clojure.core/double [:arg])
(re-defn #'clojure.core/volatile? [:arg])
(re-defn #'clojure.core/definline [nil])
(re-defn #'clojure.core/nfirst [:arg])
(re-defn #'clojure.core/meta [nil])
(re-defn #'clojure.core/find-protocol-impl [nil :arg])
(re-defn #'clojure.core/bit-and-not [:args])
(re-defn #'clojure.core/*default-data-reader-fn* [nil])
(re-defn #'clojure.core/var? [nil])
(re-defn #'clojure.core/method-sig [nil])
(re-defn #'clojure.core/unchecked-add-int [:arg :arg])
(re-defn #'clojure.core/unquote-splicing [nil])
(re-defn #'clojure.core/hash-ordered-coll [:coll])
(re-defn #'clojure.core/future [nil])
(re-defn #'clojure.core/reset-meta! [nil nil])
(re-defn #'clojure.core/cycle [:coll])
(re-defn #'clojure.core/fn [nil])
(re-defn #'clojure.core/seque [:str] [nil :str])
(re-defn #'clojure.core/empty? [:coll])
(re-defn #'clojure.core/short [:arg])
(re-defn #'clojure.core/definterface [nil])
(re-defn #'clojure.core/filterv [:f :coll])
(re-defn #'clojure.core/hash [:arg])
(re-defn #'clojure.core/quot [nil nil])
(re-defn #'clojure.core/ns-aliases [nil])
(re-defn #'clojure.core/read [] [nil] [nil nil nil] [nil nil nil nil] [nil nil])
(re-defn #'clojure.core/unchecked-double [:arg])
(re-defn #'clojure.core/key [nil])
(re-defn #'clojure.core/longs [:args])
(re-defn #'clojure.core/not= [:args])
(re-defn #'clojure.core/string? [:arg])
(re-defn #'clojure.core/uri? [:arg])
(re-defn #'clojure.core/aset-double [nil nil :arg nil])
(re-defn #'clojure.core/unchecked-multiply-int [:arg :arg])
(re-defn #'clojure.core/chunk-rest [:str])
(re-defn #'clojure.core/pcalls [nil])
(re-defn #'clojure.core/*allow-unresolved-vars* [nil])
(re-defn #'clojure.core/remove-all-methods [nil])
(re-defn #'clojure.core/ns-resolve [nil nil] [nil nil nil])
(re-defn #'clojure.core/as-> [nil])
(re-defn #'clojure.core/aset-boolean [nil nil :arg nil])
(re-defn #'clojure.core/trampoline [:f :args])
(re-defn #'clojure.core/double? [:arg])
(re-defn #'clojure.core/when-not [nil])
(re-defn #'clojure.core/*1 [nil])
(re-defn #'clojure.core/vec [:coll])
(re-defn #'clojure.core/*print-meta* [nil])
(re-defn #'clojure.core/when [nil])
(re-defn #'clojure.core/int [:arg])
(re-defn #'clojure.core/map-entry? [:arg])
(re-defn #'clojure.core/ns-refers [nil])
(re-defn #'clojure.core/rand [:n])
(re-defn #'clojure.core/second [:arg])
(re-defn #'clojure.core/vector-of [nil])
(re-defn #'clojure.core/hash-combine [:arg :arg])
(re-defn #'clojure.core/> [:args])
(re-defn #'clojure.core/replace [nil] [nil :coll])
(re-defn #'clojure.core/int? [:arg])
(re-defn #'clojure.core/associative? [:coll])
(re-defn #'clojure.core/unchecked-int [:arg])
(re-defn #'clojure.core/set-error-handler! [nil nil])
(re-defn #'clojure.core/inst-ms* [nil])
(re-defn #'clojure.core/keyword? [:arg])
(re-defn #'clojure.core/force [:arg])
(re-defn #'clojure.core/bound-fn* [:f])
(re-defn #'clojure.core/namespace-munge [nil])
(re-defn #'clojure.core/group-by [:f :coll])
(re-defn #'clojure.core/prn [:args])
(re-defn #'clojure.core/extend [nil])
(re-defn #'clojure.core/unchecked-multiply [:arg :arg])
(re-defn #'clojure.core/some->> [nil])
(re-defn #'clojure.core/default-data-readers [nil])
(re-defn #'clojure.core/->VecSeq [nil nil nil nil nil])
(re-defn #'clojure.core/even? [:n])
(re-defn #'clojure.core/unchecked-dec [:arg])
(re-defn #'clojure.core/Inst [nil])
(re-defn #'clojure.core/tagged-literal? [nil])
(re-defn #'clojure.core/double-array [nil] [:n nil])
(re-defn #'clojure.core/in-ns [nil])
(re-defn #'clojure.core/create-ns [nil])
(re-defn #'clojure.core/re-matcher [nil :str])
(re-defn #'clojure.core/ref [:arg nil])
(re-defn #'clojure.core/bigint [:arg])
(re-defn #'clojure.core/bigdec? [:arg])
(re-defn #'clojure.core/extends? [nil nil])
(re-defn #'clojure.core/promise [nil])
(re-defn #'clojure.core/aset-char [nil nil :arg nil])
(re-defn #'clojure.core/rseq [nil])
(re-defn #'clojure.core/construct-proxy [nil])
(re-defn #'clojure.core/agent-errors [nil])
(re-defn #'clojure.core/*compile-files* [nil])
(re-defn #'clojure.core/*math-context* [nil])
(re-defn #'clojure.core/float [:arg])
(re-defn #'clojure.core/pr-str [:args])
(re-defn #'clojure.core/concat [] [:arg nil])
(re-defn #'clojure.core/aset-short [nil nil :arg nil])
(re-defn #'clojure.core/set-agent-send-off-executor! [nil])
(re-defn #'clojure.core/ns [nil nil nil nil])
(re-defn #'clojure.core/symbol [nil] [nil nil])
(re-defn #'clojure.core/to-array-2d [:coll])
(re-defn #'clojure.core/mod [nil nil])
(re-defn #'clojure.core/amap [nil nil nil nil])
(re-defn #'clojure.core/pop [:coll])
(re-defn #'clojure.core/use [:args])
(re-defn #'clojure.core/unquote [nil])
(re-defn #'clojure.core/declare [nil])
(re-defn #'clojure.core/dissoc! [:map-or-vector :arg nil])
(re-defn #'clojure.core/reductions [:f :coll] [:f nil :coll])
(re-defn #'clojure.core/aset-byte [nil nil :arg nil])
(re-defn #'clojure.core/indexed? [:coll])
(re-defn #'clojure.core/ref-history-count [nil])
(re-defn #'clojure.core/- [:args])
(re-defn #'clojure.core/assoc! [:coll :arg :arg nil])
(re-defn #'clojure.core/hash-set [nil])
(re-defn #'clojure.core/reduce-kv [:f nil :coll])
(re-defn #'clojure.core/or [nil])
(re-defn #'clojure.core/cast [:coll :arg])
(re-defn #'clojure.core/reset! [nil nil])
(re-defn #'clojure.core/name [:arg])
(re-defn #'clojure.core/ffirst [:arg])
(re-defn #'clojure.core/sorted-set [nil])
(re-defn #'clojure.core/counted? [:coll])
(re-defn #'clojure.core/byte-array [nil] [:n nil])
(re-defn #'clojure.core/tagged-literal [nil nil])
(re-defn #'clojure.core/println [:args])
(re-defn #'clojure.core/extend-type [nil])
(re-defn #'clojure.core/macroexpand-1 [nil])
(re-defn #'clojure.core/char-name-string [nil])
(re-defn #'clojure.core/bit-test [:arg :n])
(re-defn #'clojure.core/defmethod [nil])
(re-defn #'clojure.core/EMPTY-NODE [nil])
(re-defn #'clojure.core/time [nil])
(re-defn #'clojure.core/memoize [:f])
(re-defn #'clojure.core/alter-meta! [:args])
(re-defn #'clojure.core/future? [:arg])
(re-defn #'clojure.core/zero? [:arg])
(re-defn #'clojure.core/simple-keyword? [:arg])
(re-defn #'clojure.core/require [:args])
(re-defn #'clojure.core/unchecked-dec-int [:arg])
(re-defn #'clojure.core/persistent! [:coll])
(re-defn #'clojure.core/nnext [:arg])
(re-defn #'clojure.core/add-watch [nil :arg nil])
(re-defn #'clojure.core/not-every? [:f :coll])
(re-defn #'clojure.core/class? [:arg])
(re-defn #'clojure.core/rem [nil nil])
(re-defn #'clojure.core/agent-error [nil])
(re-defn #'clojure.core/some [:f :coll])
(re-defn #'clojure.core/future-cancelled? [:f])
(re-defn #'clojure.core/memfn [:args])
(re-defn #'clojure.core/neg-int? [:arg])
(re-defn #'clojure.core/struct-map [nil])
(re-defn #'clojure.core/drop [:n] [:n :coll])
(re-defn #'clojure.core/*data-readers* [nil])
(re-defn #'clojure.core/nth [:coll nil] [:coll nil nil])
(re-defn #'clojure.core/sorted? [:coll])
(re-defn #'clojure.core/nil? [:arg])
(re-defn #'clojure.core/extend-protocol [nil])
(re-defn #'clojure.core/split-at [:n :coll])
(re-defn #'clojure.core/*e [nil])
(re-defn #'clojure.core/load-reader [nil])
(re-defn #'clojure.core/random-sample [nil] [nil :coll])
(re-defn #'clojure.core/cond-> [nil])
(re-defn #'clojure.core/dotimes [nil])
(re-defn #'clojure.core/select-keys [:map-or-vector nil])
(re-defn #'clojure.core/bit-and [:args])
(re-defn #'clojure.core/bounded-count [:n :coll])
(re-defn #'clojure.core/update [nil nil :f :arg :arg] [nil nil :f :arg] [nil nil :f] [nil nil :f :arg :arg nil :args])
(re-defn #'clojure.core/list* [nil nil :args] [nil :args] [:args] [nil nil :coll :args :args])
(re-defn #'clojure.core/reify [nil])
(re-defn #'clojure.core/update-in [:args])
(re-defn #'clojure.core/prefer-method [nil nil nil])
(re-defn #'clojure.core/aset-int [nil nil :arg nil])
(re-defn #'clojure.core/*clojure-version* [nil])
(re-defn #'clojure.core/ensure-reduced [:arg])
(re-defn #'clojure.core/*' [:args])
(re-defn #'clojure.core/instance? [:coll :arg])
(re-defn #'clojure.core/with-open [nil])
(re-defn #'clojure.core/mix-collection-hash [nil nil])
(re-defn #'clojure.core/re-find [nil] [nil :str])
(re-defn #'clojure.core/run! [nil :coll])
(re-defn #'clojure.core/val [nil])
(re-defn #'clojure.core/defonce [nil nil])
(re-defn #'clojure.core/unchecked-add [:arg :arg])
(re-defn #'clojure.core/loaded-libs [nil])
(re-defn #'clojure.core/->Vec [nil nil nil nil nil nil])
(re-defn #'clojure.core/bytes? [:arg])
(re-defn #'clojure.core/not [:arg])
(re-defn #'clojure.core/with-meta [nil nil])
(re-defn #'clojure.core/unreduced [:arg])
(re-defn #'clojure.core/the-ns [:arg])
(re-defn #'clojure.core/record? [:arg])
(re-defn #'clojure.core/type [:arg])
(re-defn #'clojure.core/identical? [:arg :arg])
(re-defn #'clojure.core/unchecked-divide-int [:arg :arg])
(re-defn #'clojure.core/ns-name [nil])
(re-defn #'clojure.core/max-key [:args])
(re-defn #'clojure.core/*unchecked-math* [nil])
(re-defn #'clojure.core/defn- [nil])
(re-defn #'clojure.core/*out* [nil])
(re-defn #'clojure.core/file-seq [nil])
(re-defn #'clojure.core/agent [nil])
(re-defn #'clojure.core/ns-map [nil])
(re-defn #'clojure.core/set-validator! [nil nil])
(re-defn #'clojure.core/ident? [:arg])
(re-defn #'clojure.core/defprotocol [nil])
(re-defn #'clojure.core/swap! [nil :f :args])
(re-defn #'clojure.core/vals [:map-or-vector])
(re-defn #'clojure.core/unchecked-subtract [:arg :arg])
(re-defn #'clojure.core/*warn-on-reflection* [nil])
(re-defn #'clojure.core/sorted-set-by [nil])
(re-defn #'clojure.core/sync [nil])
(re-defn #'clojure.core/qualified-ident? [:arg])
(re-defn #'clojure.core/assert [:arg] [:arg nil])
(re-defn #'clojure.core/*compile-path* [nil])
(re-defn #'clojure.core/true? [:arg])
(re-defn #'clojure.core/release-pending-sends [nil])
(re-defn #'clojure.core/print [:args])
(re-defn #'clojure.core/empty [:coll])
(re-defn #'clojure.core/remove-method [nil nil])
(re-defn #'clojure.core/*in* [nil])
(re-defn #'clojure.core/print-ctor [nil nil nil])
(re-defn #'clojure.core/letfn [nil])
(re-defn #'clojure.core/volatile! [:arg])
(re-defn #'clojure.core// [:args])
(re-defn #'clojure.core/read-line [nil])
(re-defn #'clojure.core/reader-conditional? [nil])
(re-defn #'clojure.core/bit-or [:args])
(re-defn #'clojure.core/clear-agent-errors [nil])
(re-defn #'clojure.core/vector [nil nil :coll nil] [nil nil :coll] [nil nil] [nil] [] [nil nil :coll nil nil :args])
(re-defn #'clojure.core/proxy-super [:args])
(re-defn #'clojure.core/>= [:args])
(re-defn #'clojure.core/drop-last [:str] [:n :str])
(re-defn #'clojure.core/not-empty [:coll])
(re-defn #'clojure.core/distinct [:coll])
(re-defn #'clojure.core/partition [:n :coll] [:n :n :coll] [:n :n nil :coll])
(re-defn #'clojure.core/loop [nil])
(re-defn #'clojure.core/add-classpath [nil])
(re-defn #'clojure.core/bit-flip [:arg :n])
(re-defn #'clojure.core/long-array [nil] [:n nil])
(re-defn #'clojure.core/descendants [nil] [nil nil])
(re-defn #'clojure.core/merge [:maps-or-vectors])
(re-defn #'clojure.core/accessor [:str :arg])
(re-defn #'clojure.core/integer? [:n])
(re-defn #'clojure.core/mapv [:colls])
(re-defn #'clojure.core/partition-all [:n] [:n :coll] [:n :n :coll])
(re-defn #'clojure.core/partition-by [:f] [:f :coll])
(re-defn #'clojure.core/numerator [nil])
(re-defn #'clojure.core/object-array [nil])
(re-defn #'clojure.core/with-out-str [nil])
(re-defn #'clojure.core/condp [nil])
(re-defn #'clojure.core/derive [nil nil] [nil nil nil])
(re-defn #'clojure.core/load-string [:str])
(re-defn #'clojure.core/special-symbol? [:str])
(re-defn #'clojure.core/ancestors [nil] [nil nil])
(re-defn #'clojure.core/subseq [nil nil :arg] [nil nil nil nil nil])
(re-defn #'clojure.core/error-handler [nil])
(re-defn #'clojure.core/gensym [nil])
(re-defn #'clojure.core/cond [nil])
(re-defn #'clojure.core/ratio? [:n])
(re-defn #'clojure.core/delay? [:arg])
(re-defn #'clojure.core/intern [nil nil] [nil nil :arg])
(re-defn #'clojure.core/print-simple [nil nil])
(re-defn #'clojure.core/flatten [:arg])
(re-defn #'clojure.core/doubles [:args])
(re-defn #'clojure.core/with-in-str [nil])
(re-defn #'clojure.core/remove-watch [nil :arg])
(re-defn #'clojure.core/ex-info [nil :map-or-vector] [nil :map-or-vector nil])
(re-defn #'clojure.core/ifn? [:arg])
(re-defn #'clojure.core/some-> [nil])
(re-defn #'clojure.core/nat-int? [:arg])
(re-defn #'clojure.core/proxy-name [nil nil])
(re-defn #'clojure.core/ns-interns [nil])
(re-defn #'clojure.core/all-ns [nil])
(re-defn #'clojure.core/find-protocol-method [nil nil :arg])
(re-defn #'clojure.core/subvec [nil :n] [nil :n :n])
(re-defn #'clojure.core/for [nil nil])
(re-defn #'clojure.core/binding [nil])
(re-defn #'clojure.core/partial [:f nil nil] [:f nil] [:f] [:f nil nil nil :args])
(re-defn #'clojure.core/chunked-seq? [:str])
(re-defn #'clojure.core/find-keyword [nil] [nil nil])
(re-defn #'clojure.core/replicate [:n :arg])
(re-defn #'clojure.core/min-key [:args])
(re-defn #'clojure.core/reduced [:arg])
(re-defn #'clojure.core/char-escape-string [nil])
(re-defn #'clojure.core/re-matches [nil :str])
(re-defn #'clojure.core/array-map [nil])
(re-defn #'clojure.core/unchecked-byte [:arg])
(re-defn #'clojure.core/with-local-vars [nil])
(re-defn #'clojure.core/ns-imports [nil])
(re-defn #'clojure.core/send-off [:args])
(re-defn #'clojure.core/every-pred [nil])
(re-defn #'clojure.core/keys [:map-or-vector])
(re-defn #'clojure.core/rationalize [nil])
(re-defn #'clojure.core/load-file [nil])
(re-defn #'clojure.core/distinct? [:args])
(re-defn #'clojure.core/pos-int? [:arg])
(re-defn #'clojure.core/extenders [nil])
(re-defn #'clojure.core/unchecked-short [:arg])
(re-defn #'clojure.core/methods [nil])
(re-defn #'clojure.core/odd? [:n])
(re-defn #'clojure.core/->ArrayChunk [nil nil nil :n])
(re-defn #'clojure.core/float-array [nil] [:n nil])
(re-defn #'clojure.core/*3 [nil])
(re-defn #'clojure.core/alias [nil nil])
(re-defn #'clojure.core/frequencies [:coll])
(re-defn #'clojure.core/read-string [:str] [nil :str])
(re-defn #'clojure.core/proxy [:fs])
(re-defn #'clojure.core/rsubseq [nil nil :arg] [nil nil nil nil nil])
(re-defn #'clojure.core/inc [:arg])
(re-defn #'clojure.core/get-method [nil nil])
(re-defn #'clojure.core/with-redefs [nil])
(re-defn #'clojure.core/uuid? [:arg])
(re-defn #'clojure.core/bit-clear [:arg :n])
(re-defn #'clojure.core/filter [:f] [:f :coll])
(re-defn #'clojure.core/locking [nil])
(re-defn #'clojure.core/list [nil])
(re-defn #'clojure.core/+ [:args])
(re-defn #'clojure.core/split-with [:f :coll])
(re-defn #'clojure.core/aset [nil nil :arg nil])
(re-defn #'clojure.core/->VecNode [nil nil])
(re-defn #'clojure.core/keyword [nil] [nil nil])
(re-defn #'clojure.core/*ns* [nil])
(re-defn #'clojure.core/destructure [nil])
(re-defn #'clojure.core/*assert* [nil])
(re-defn #'clojure.core/defmulti [nil])
(re-defn #'clojure.core/chars [:args])
(re-defn #'clojure.core/str [:args])
(re-defn #'clojure.core/next [:coll])
(re-defn #'clojure.core/hash-map [nil])
(re-defn #'clojure.core/if-let [nil])
(re-defn #'clojure.core/underive [nil nil] [nil nil nil])
(re-defn #'clojure.core/ref-max-history [nil] [nil :n])
(re-defn #'clojure.core/Throwable->map [nil])
(re-defn #'clojure.core/false? [:arg])
(re-defn #'clojure.core/*print-readably* [nil])
(re-defn #'clojure.core/ints [:args])
(re-defn #'clojure.core/class [:arg])
(re-defn #'clojure.core/some-fn [nil])
(re-defn #'clojure.core/case [nil])
(re-defn #'clojure.core/*flush-on-newline* [nil])
(re-defn #'clojure.core/to-array [:coll])
(re-defn #'clojure.core/bigdec [:arg])
(re-defn #'clojure.core/list? [:arg])
(re-defn #'clojure.core/simple-ident? [:arg])
(re-defn #'clojure.core/bit-not [:arg])
(re-defn #'clojure.core/io! [nil])
(re-defn #'clojure.core/xml-seq [nil])
(re-defn #'clojure.core/byte [:arg])
(re-defn #'clojure.core/max [:args])
(re-defn #'clojure.core/== [:args])
(re-defn #'clojure.core/*agent* [nil])
(re-defn #'clojure.core/lazy-cat [:colls])
(re-defn #'clojure.core/comment [nil])
(re-defn #'clojure.core/parents [nil] [nil nil])
(re-defn #'clojure.core/count [:coll])
(re-defn #'clojure.core/supers [nil])
(re-defn #'clojure.core/*fn-loader* [nil])
(re-defn #'clojure.core/sorted-map-by [nil])
(re-defn #'clojure.core/apply [:f :arg :arg :args] [:f :arg :args] [:f :args] [:f :arg :arg nil :args :args])
(re-defn #'clojure.core/interpose [nil] [nil :coll])
(re-defn #'clojure.core/deref [nil] [nil nil nil])
(re-defn #'clojure.core/assoc [:map-or-vector :arg :arg nil])
(re-defn #'clojure.core/rational? [:n])
(re-defn #'clojure.core/transient [:coll])
(re-defn #'clojure.core/clojure-version [nil])
(re-defn #'clojure.core/chunk-cons [nil nil])
(re-defn #'clojure.core/comparator [:f])
(re-defn #'clojure.core/sorted-map [nil])
(re-defn #'clojure.core/send [:args])
(re-defn #'clojure.core/drop-while [:f] [:f :coll])
(re-defn #'clojure.core/proxy-call-with-super [nil nil nil])
(re-defn #'clojure.core/realized? [:arg])
(re-defn #'clojure.core/char-array [nil] [:n nil])
(re-defn #'clojure.core/resolve [nil] [nil nil])
(re-defn #'clojure.core/compare [:arg :arg])
(re-defn #'clojure.core/complement [:f])
(re-defn #'clojure.core/*compiler-options* [nil])
(re-defn #'clojure.core/*print-dup* [nil])
(re-defn #'clojure.core/with-redefs-fn [nil nil])
(re-defn #'clojure.core/sequence [:coll :colls])
(re-defn #'clojure.core/constantly [:arg])
(re-defn #'clojure.core/get-proxy-class [nil])
(re-defn #'clojure.core/make-array [nil])
(re-defn #'clojure.core/shorts [:args])
(re-defn #'clojure.core/completing [:f] [:f nil])
(re-defn #'clojure.core/update-proxy [nil nil])
(re-defn #'clojure.core/unchecked-negate-int [:arg])
(re-defn #'clojure.core/hash-unordered-coll [:coll])
(re-defn #'clojure.core/repeat [:arg] [:n :arg])
(re-defn #'clojure.core/unchecked-inc [:arg])
(re-defn #'clojure.core/nthnext [:coll :n])
(re-defn #'clojure.core/and [nil])
(re-defn #'clojure.core/create-struct [nil])
(re-defn #'clojure.core/get-validator [nil])
(re-defn #'clojure.core/number? [:arg])
(re-defn #'clojure.core/await-for [nil])
(re-defn #'clojure.core/chunk-next [:str])
(re-defn #'clojure.core/print-str [:args])
(re-defn #'clojure.core/not-any? [:f :coll])
(re-defn #'clojure.core/into-array [nil] [nil nil])
(re-defn #'clojure.core/qualified-symbol? [:arg])
(re-defn #'clojure.core/init-proxy [nil nil])
(re-defn #'clojure.core/chunk-buffer [nil])
(re-defn #'clojure.core/seqable? [:arg])
(re-defn #'clojure.core/symbol? [:arg])
(re-defn #'clojure.core/when-some [nil])
(re-defn #'clojure.core/unchecked-char [:arg])
(re-defn #'clojure.core/->> [nil])
(re-defn #'clojure.core/future-cancel [:f])
(re-defn #'clojure.core/var-get [:arg])
(re-defn #'clojure.core/commute [:args])
(re-defn #'clojure.core/coll? [:arg])
(re-defn #'clojure.core/get-in [nil nil] [nil nil nil])
(re-defn #'clojure.core/fnext [:arg])
(re-defn #'clojure.core/denominator [nil])
(re-defn #'clojure.core/bytes [:args])
(re-defn #'clojure.core/refer-clojure [nil])

